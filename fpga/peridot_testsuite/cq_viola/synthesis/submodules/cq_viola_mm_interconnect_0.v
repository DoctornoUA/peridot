// cq_viola_mm_interconnect_0.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2014.06.24.16:32:37

`timescale 1 ps / 1 ps
module cq_viola_mm_interconnect_0 (
		input  wire        clk_core_clk_clk,                                     //                                   clk_core_clk.clk
		input  wire        clk_peri_clk_clk,                                     //                                   clk_peri_clk.clk
		input  wire        nios2_e_reset_n_reset_bridge_in_reset_reset,          //          nios2_e_reset_n_reset_bridge_in_reset.reset
		input  wire        peripherals_bridge_reset_reset_bridge_in_reset_reset, // peripherals_bridge_reset_reset_bridge_in_reset.reset
		input  wire [28:0] nios2_e_data_master_address,                          //                            nios2_e_data_master.address
		output wire        nios2_e_data_master_waitrequest,                      //                                               .waitrequest
		input  wire [3:0]  nios2_e_data_master_byteenable,                       //                                               .byteenable
		input  wire        nios2_e_data_master_read,                             //                                               .read
		output wire [31:0] nios2_e_data_master_readdata,                         //                                               .readdata
		input  wire        nios2_e_data_master_write,                            //                                               .write
		input  wire [31:0] nios2_e_data_master_writedata,                        //                                               .writedata
		input  wire        nios2_e_data_master_debugaccess,                      //                                               .debugaccess
		input  wire [27:0] nios2_e_instruction_master_address,                   //                     nios2_e_instruction_master.address
		output wire        nios2_e_instruction_master_waitrequest,               //                                               .waitrequest
		input  wire        nios2_e_instruction_master_read,                      //                                               .read
		output wire [31:0] nios2_e_instruction_master_readdata,                  //                                               .readdata
		input  wire [31:0] peridot_bridge_avalon_master_address,                 //                   peridot_bridge_avalon_master.address
		output wire        peridot_bridge_avalon_master_waitrequest,             //                                               .waitrequest
		input  wire [3:0]  peridot_bridge_avalon_master_byteenable,              //                                               .byteenable
		input  wire        peridot_bridge_avalon_master_read,                    //                                               .read
		output wire [31:0] peridot_bridge_avalon_master_readdata,                //                                               .readdata
		output wire        peridot_bridge_avalon_master_readdatavalid,           //                                               .readdatavalid
		input  wire        peridot_bridge_avalon_master_write,                   //                                               .write
		input  wire [31:0] peridot_bridge_avalon_master_writedata,               //                                               .writedata
		output wire [11:0] ipl_memory_s1_address,                                //                                  ipl_memory_s1.address
		output wire        ipl_memory_s1_write,                                  //                                               .write
		input  wire [31:0] ipl_memory_s1_readdata,                               //                                               .readdata
		output wire [31:0] ipl_memory_s1_writedata,                              //                                               .writedata
		output wire [3:0]  ipl_memory_s1_byteenable,                             //                                               .byteenable
		output wire        ipl_memory_s1_chipselect,                             //                                               .chipselect
		output wire        ipl_memory_s1_clken,                                  //                                               .clken
		output wire [8:0]  nios2_e_jtag_debug_module_address,                    //                      nios2_e_jtag_debug_module.address
		output wire        nios2_e_jtag_debug_module_write,                      //                                               .write
		output wire        nios2_e_jtag_debug_module_read,                       //                                               .read
		input  wire [31:0] nios2_e_jtag_debug_module_readdata,                   //                                               .readdata
		output wire [31:0] nios2_e_jtag_debug_module_writedata,                  //                                               .writedata
		output wire [3:0]  nios2_e_jtag_debug_module_byteenable,                 //                                               .byteenable
		input  wire        nios2_e_jtag_debug_module_waitrequest,                //                                               .waitrequest
		output wire        nios2_e_jtag_debug_module_debugaccess,                //                                               .debugaccess
		output wire [15:0] peripherals_bridge_s0_address,                        //                          peripherals_bridge_s0.address
		output wire        peripherals_bridge_s0_write,                          //                                               .write
		output wire        peripherals_bridge_s0_read,                           //                                               .read
		input  wire [31:0] peripherals_bridge_s0_readdata,                       //                                               .readdata
		output wire [31:0] peripherals_bridge_s0_writedata,                      //                                               .writedata
		output wire [0:0]  peripherals_bridge_s0_burstcount,                     //                                               .burstcount
		output wire [3:0]  peripherals_bridge_s0_byteenable,                     //                                               .byteenable
		input  wire        peripherals_bridge_s0_readdatavalid,                  //                                               .readdatavalid
		input  wire        peripherals_bridge_s0_waitrequest,                    //                                               .waitrequest
		output wire        peripherals_bridge_s0_debugaccess,                    //                                               .debugaccess
		output wire [21:0] sdram_s1_address,                                     //                                       sdram_s1.address
		output wire        sdram_s1_write,                                       //                                               .write
		output wire        sdram_s1_read,                                        //                                               .read
		input  wire [15:0] sdram_s1_readdata,                                    //                                               .readdata
		output wire [15:0] sdram_s1_writedata,                                   //                                               .writedata
		output wire [1:0]  sdram_s1_byteenable,                                  //                                               .byteenable
		input  wire        sdram_s1_readdatavalid,                               //                                               .readdatavalid
		input  wire        sdram_s1_waitrequest,                                 //                                               .waitrequest
		output wire        sdram_s1_chipselect                                   //                                               .chipselect
	);

	wire          nios2_e_instruction_master_translator_avalon_universal_master_0_waitrequest;                    // nios2_e_instruction_master_translator_avalon_universal_master_0_agent:av_waitrequest -> nios2_e_instruction_master_translator:uav_waitrequest
	wire    [2:0] nios2_e_instruction_master_translator_avalon_universal_master_0_burstcount;                     // nios2_e_instruction_master_translator:uav_burstcount -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] nios2_e_instruction_master_translator_avalon_universal_master_0_writedata;                      // nios2_e_instruction_master_translator:uav_writedata -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] nios2_e_instruction_master_translator_avalon_universal_master_0_address;                        // nios2_e_instruction_master_translator:uav_address -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:av_address
	wire          nios2_e_instruction_master_translator_avalon_universal_master_0_lock;                           // nios2_e_instruction_master_translator:uav_lock -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:av_lock
	wire          nios2_e_instruction_master_translator_avalon_universal_master_0_write;                          // nios2_e_instruction_master_translator:uav_write -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:av_write
	wire          nios2_e_instruction_master_translator_avalon_universal_master_0_read;                           // nios2_e_instruction_master_translator:uav_read -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] nios2_e_instruction_master_translator_avalon_universal_master_0_readdata;                       // nios2_e_instruction_master_translator_avalon_universal_master_0_agent:av_readdata -> nios2_e_instruction_master_translator:uav_readdata
	wire          nios2_e_instruction_master_translator_avalon_universal_master_0_debugaccess;                    // nios2_e_instruction_master_translator:uav_debugaccess -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] nios2_e_instruction_master_translator_avalon_universal_master_0_byteenable;                     // nios2_e_instruction_master_translator:uav_byteenable -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          nios2_e_instruction_master_translator_avalon_universal_master_0_readdatavalid;                  // nios2_e_instruction_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> nios2_e_instruction_master_translator:uav_readdatavalid
	wire          rsp_xbar_mux_src_endofpacket;                                                                   // rsp_xbar_mux:src_endofpacket -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                                         // rsp_xbar_mux:src_valid -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                                 // rsp_xbar_mux:src_startofpacket -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [105:0] rsp_xbar_mux_src_data;                                                                          // rsp_xbar_mux:src_data -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:rp_data
	wire    [3:0] rsp_xbar_mux_src_channel;                                                                       // rsp_xbar_mux:src_channel -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_src_ready;                                                                         // nios2_e_instruction_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux:src_ready
	wire          nios2_e_data_master_translator_avalon_universal_master_0_waitrequest;                           // nios2_e_data_master_translator_avalon_universal_master_0_agent:av_waitrequest -> nios2_e_data_master_translator:uav_waitrequest
	wire    [2:0] nios2_e_data_master_translator_avalon_universal_master_0_burstcount;                            // nios2_e_data_master_translator:uav_burstcount -> nios2_e_data_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] nios2_e_data_master_translator_avalon_universal_master_0_writedata;                             // nios2_e_data_master_translator:uav_writedata -> nios2_e_data_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] nios2_e_data_master_translator_avalon_universal_master_0_address;                               // nios2_e_data_master_translator:uav_address -> nios2_e_data_master_translator_avalon_universal_master_0_agent:av_address
	wire          nios2_e_data_master_translator_avalon_universal_master_0_lock;                                  // nios2_e_data_master_translator:uav_lock -> nios2_e_data_master_translator_avalon_universal_master_0_agent:av_lock
	wire          nios2_e_data_master_translator_avalon_universal_master_0_write;                                 // nios2_e_data_master_translator:uav_write -> nios2_e_data_master_translator_avalon_universal_master_0_agent:av_write
	wire          nios2_e_data_master_translator_avalon_universal_master_0_read;                                  // nios2_e_data_master_translator:uav_read -> nios2_e_data_master_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] nios2_e_data_master_translator_avalon_universal_master_0_readdata;                              // nios2_e_data_master_translator_avalon_universal_master_0_agent:av_readdata -> nios2_e_data_master_translator:uav_readdata
	wire          nios2_e_data_master_translator_avalon_universal_master_0_debugaccess;                           // nios2_e_data_master_translator:uav_debugaccess -> nios2_e_data_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] nios2_e_data_master_translator_avalon_universal_master_0_byteenable;                            // nios2_e_data_master_translator:uav_byteenable -> nios2_e_data_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          nios2_e_data_master_translator_avalon_universal_master_0_readdatavalid;                         // nios2_e_data_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> nios2_e_data_master_translator:uav_readdatavalid
	wire          rsp_xbar_mux_001_src_endofpacket;                                                               // rsp_xbar_mux_001:src_endofpacket -> nios2_e_data_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_001_src_valid;                                                                     // rsp_xbar_mux_001:src_valid -> nios2_e_data_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_001_src_startofpacket;                                                             // rsp_xbar_mux_001:src_startofpacket -> nios2_e_data_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [105:0] rsp_xbar_mux_001_src_data;                                                                      // rsp_xbar_mux_001:src_data -> nios2_e_data_master_translator_avalon_universal_master_0_agent:rp_data
	wire    [3:0] rsp_xbar_mux_001_src_channel;                                                                   // rsp_xbar_mux_001:src_channel -> nios2_e_data_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_001_src_ready;                                                                     // nios2_e_data_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_001:src_ready
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_waitrequest;                  // peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:av_waitrequest -> peridot_bridge_avalon_master_translator:uav_waitrequest
	wire    [2:0] peridot_bridge_avalon_master_translator_avalon_universal_master_0_burstcount;                   // peridot_bridge_avalon_master_translator:uav_burstcount -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] peridot_bridge_avalon_master_translator_avalon_universal_master_0_writedata;                    // peridot_bridge_avalon_master_translator:uav_writedata -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] peridot_bridge_avalon_master_translator_avalon_universal_master_0_address;                      // peridot_bridge_avalon_master_translator:uav_address -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:av_address
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_lock;                         // peridot_bridge_avalon_master_translator:uav_lock -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:av_lock
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_write;                        // peridot_bridge_avalon_master_translator:uav_write -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:av_write
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_read;                         // peridot_bridge_avalon_master_translator:uav_read -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] peridot_bridge_avalon_master_translator_avalon_universal_master_0_readdata;                     // peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:av_readdata -> peridot_bridge_avalon_master_translator:uav_readdata
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_debugaccess;                  // peridot_bridge_avalon_master_translator:uav_debugaccess -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] peridot_bridge_avalon_master_translator_avalon_universal_master_0_byteenable;                   // peridot_bridge_avalon_master_translator:uav_byteenable -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_readdatavalid;                // peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> peridot_bridge_avalon_master_translator:uav_readdatavalid
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // nios2_e_jtag_debug_module_translator:uav_waitrequest -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_burstcount;              // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_burstcount -> nios2_e_jtag_debug_module_translator:uav_burstcount
	wire   [31:0] nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_writedata;               // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_writedata -> nios2_e_jtag_debug_module_translator:uav_writedata
	wire   [31:0] nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_address;                 // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_address -> nios2_e_jtag_debug_module_translator:uav_address
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_write;                   // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_write -> nios2_e_jtag_debug_module_translator:uav_write
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_lock;                    // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_lock -> nios2_e_jtag_debug_module_translator:uav_lock
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_read;                    // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_read -> nios2_e_jtag_debug_module_translator:uav_read
	wire   [31:0] nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdata;                // nios2_e_jtag_debug_module_translator:uav_readdata -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // nios2_e_jtag_debug_module_translator:uav_readdatavalid -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_debugaccess -> nios2_e_jtag_debug_module_translator:uav_debugaccess
	wire    [3:0] nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_byteenable;              // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_byteenable -> nios2_e_jtag_debug_module_translator:uav_byteenable
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_valid;            // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_valid -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [106:0] nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_data;             // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_data -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_ready;            // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [106:0] nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_ready -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_src_endofpacket;                                                                   // cmd_xbar_mux:src_endofpacket -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                         // cmd_xbar_mux:src_valid -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                                 // cmd_xbar_mux:src_startofpacket -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [105:0] cmd_xbar_mux_src_data;                                                                          // cmd_xbar_mux:src_data -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_data
	wire    [3:0] cmd_xbar_mux_src_channel;                                                                       // cmd_xbar_mux:src_channel -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_src_ready;                                                                         // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux:src_ready
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                         // ipl_memory_s1_translator:uav_waitrequest -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                          // ipl_memory_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> ipl_memory_s1_translator:uav_burstcount
	wire   [31:0] ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                           // ipl_memory_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> ipl_memory_s1_translator:uav_writedata
	wire   [31:0] ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_address;                             // ipl_memory_s1_translator_avalon_universal_slave_0_agent:m0_address -> ipl_memory_s1_translator:uav_address
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_write;                               // ipl_memory_s1_translator_avalon_universal_slave_0_agent:m0_write -> ipl_memory_s1_translator:uav_write
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                // ipl_memory_s1_translator_avalon_universal_slave_0_agent:m0_lock -> ipl_memory_s1_translator:uav_lock
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_read;                                // ipl_memory_s1_translator_avalon_universal_slave_0_agent:m0_read -> ipl_memory_s1_translator:uav_read
	wire   [31:0] ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                            // ipl_memory_s1_translator:uav_readdata -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                       // ipl_memory_s1_translator:uav_readdatavalid -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                         // ipl_memory_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> ipl_memory_s1_translator:uav_debugaccess
	wire    [3:0] ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                          // ipl_memory_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> ipl_memory_s1_translator:uav_byteenable
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                  // ipl_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                        // ipl_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                // ipl_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [106:0] ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                         // ipl_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                        // ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;               // ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                     // ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;             // ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [106:0] ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                      // ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                     // ipl_memory_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                   // ipl_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] ipl_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                    // ipl_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                   // ipl_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_001_src_endofpacket;                                                               // cmd_xbar_mux_001:src_endofpacket -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_001_src_valid;                                                                     // cmd_xbar_mux_001:src_valid -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_001_src_startofpacket;                                                             // cmd_xbar_mux_001:src_startofpacket -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [105:0] cmd_xbar_mux_001_src_data;                                                                      // cmd_xbar_mux_001:src_data -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire    [3:0] cmd_xbar_mux_001_src_channel;                                                                   // cmd_xbar_mux_001:src_channel -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_001_src_ready;                                                                     // ipl_memory_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_001:src_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                              // sdram_s1_translator:uav_waitrequest -> sdram_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [1:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                               // sdram_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire   [15:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                // sdram_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire   [31:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_address;                                  // sdram_s1_translator_avalon_universal_slave_0_agent:m0_address -> sdram_s1_translator:uav_address
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_write;                                    // sdram_s1_translator_avalon_universal_slave_0_agent:m0_write -> sdram_s1_translator:uav_write
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                     // sdram_s1_translator_avalon_universal_slave_0_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_read;                                     // sdram_s1_translator_avalon_universal_slave_0_agent:m0_read -> sdram_s1_translator:uav_read
	wire   [15:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                 // sdram_s1_translator:uav_readdata -> sdram_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                            // sdram_s1_translator:uav_readdatavalid -> sdram_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                              // sdram_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire    [1:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                               // sdram_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                       // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                             // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                     // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire   [88:0] sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                              // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                             // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                    // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                          // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                  // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire   [88:0] sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                           // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                          // sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                        // sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                         // sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                        // sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                        // sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [17:0] sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                         // sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                        // sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest;                 // peripherals_bridge_s0_translator:uav_waitrequest -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_burstcount;                  // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:m0_burstcount -> peripherals_bridge_s0_translator:uav_burstcount
	wire   [31:0] peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_writedata;                   // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:m0_writedata -> peripherals_bridge_s0_translator:uav_writedata
	wire   [31:0] peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_address;                     // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:m0_address -> peripherals_bridge_s0_translator:uav_address
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_write;                       // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:m0_write -> peripherals_bridge_s0_translator:uav_write
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_lock;                        // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:m0_lock -> peripherals_bridge_s0_translator:uav_lock
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_read;                        // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:m0_read -> peripherals_bridge_s0_translator:uav_read
	wire   [31:0] peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_readdata;                    // peripherals_bridge_s0_translator:uav_readdata -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;               // peripherals_bridge_s0_translator:uav_readdatavalid -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess;                 // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> peripherals_bridge_s0_translator:uav_debugaccess
	wire    [3:0] peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_byteenable;                  // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:m0_byteenable -> peripherals_bridge_s0_translator:uav_byteenable
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;          // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_valid;                // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rf_source_valid -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;        // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [106:0] peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_data;                 // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rf_source_data -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_ready;                // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;       // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;             // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;     // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [106:0] peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;              // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;             // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;           // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;            // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;           // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;           // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;            // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;           // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          cmd_xbar_mux_003_src_endofpacket;                                                               // cmd_xbar_mux_003:src_endofpacket -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_003_src_valid;                                                                     // cmd_xbar_mux_003:src_valid -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_003_src_startofpacket;                                                             // cmd_xbar_mux_003:src_startofpacket -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [105:0] cmd_xbar_mux_003_src_data;                                                                      // cmd_xbar_mux_003:src_data -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:cp_data
	wire    [3:0] cmd_xbar_mux_003_src_channel;                                                                   // cmd_xbar_mux_003:src_channel -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_003_src_ready;                                                                     // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_003:src_ready
	wire          nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_endofpacket;           // nios2_e_instruction_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire          nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_valid;                 // nios2_e_instruction_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire          nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_startofpacket;         // nios2_e_instruction_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [105:0] nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_data;                  // nios2_e_instruction_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire          nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_ready;                 // addr_router:sink_ready -> nios2_e_instruction_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_src_endofpacket;                                                                    // addr_router:src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          addr_router_src_valid;                                                                          // addr_router:src_valid -> cmd_xbar_demux:sink_valid
	wire          addr_router_src_startofpacket;                                                                  // addr_router:src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [105:0] addr_router_src_data;                                                                           // addr_router:src_data -> cmd_xbar_demux:sink_data
	wire    [3:0] addr_router_src_channel;                                                                        // addr_router:src_channel -> cmd_xbar_demux:sink_channel
	wire          addr_router_src_ready;                                                                          // cmd_xbar_demux:sink_ready -> addr_router:src_ready
	wire          nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_endofpacket;                  // nios2_e_data_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_001:sink_endofpacket
	wire          nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_valid;                        // nios2_e_data_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_001:sink_valid
	wire          nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_startofpacket;                // nios2_e_data_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [105:0] nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_data;                         // nios2_e_data_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_001:sink_data
	wire          nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_ready;                        // addr_router_001:sink_ready -> nios2_e_data_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_001_src_endofpacket;                                                                // addr_router_001:src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire          addr_router_001_src_valid;                                                                      // addr_router_001:src_valid -> cmd_xbar_demux_001:sink_valid
	wire          addr_router_001_src_startofpacket;                                                              // addr_router_001:src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [105:0] addr_router_001_src_data;                                                                       // addr_router_001:src_data -> cmd_xbar_demux_001:sink_data
	wire    [3:0] addr_router_001_src_channel;                                                                    // addr_router_001:src_channel -> cmd_xbar_demux_001:sink_channel
	wire          addr_router_001_src_ready;                                                                      // cmd_xbar_demux_001:sink_ready -> addr_router_001:src_ready
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket;         // peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_002:sink_endofpacket
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_valid;               // peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_002:sink_valid
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket;       // peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_002:sink_startofpacket
	wire  [105:0] peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_data;                // peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_002:sink_data
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_ready;               // addr_router_002:sink_ready -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_valid;                   // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [105:0] nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_data;                    // nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router:sink_ready -> nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_src_endofpacket;                                                                      // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                                            // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                                    // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [105:0] id_router_src_data;                                                                             // id_router:src_data -> rsp_xbar_demux:sink_data
	wire    [3:0] id_router_src_channel;                                                                          // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                                            // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                         // ipl_memory_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_valid;                               // ipl_memory_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                       // ipl_memory_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [105:0] ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_data;                                // ipl_memory_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire          ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_ready;                               // id_router_001:sink_ready -> ipl_memory_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_001_src_endofpacket;                                                                  // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire          id_router_001_src_valid;                                                                        // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire          id_router_001_src_startofpacket;                                                                // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [105:0] id_router_001_src_data;                                                                         // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire    [3:0] id_router_001_src_channel;                                                                      // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire          id_router_001_src_ready;                                                                        // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                              // sdram_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_002:sink_endofpacket
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                    // sdram_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_002:sink_valid
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                            // sdram_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_002:sink_startofpacket
	wire   [87:0] sdram_s1_translator_avalon_universal_slave_0_agent_rp_data;                                     // sdram_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_002:sink_data
	wire          sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                    // id_router_002:sink_ready -> sdram_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket;                 // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_003:sink_endofpacket
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_valid;                       // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_003:sink_valid
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket;               // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_003:sink_startofpacket
	wire  [105:0] peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_data;                        // peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_003:sink_data
	wire          peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_ready;                       // id_router_003:sink_ready -> peripherals_bridge_s0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_003_src_endofpacket;                                                                  // id_router_003:src_endofpacket -> rsp_xbar_demux_003:sink_endofpacket
	wire          id_router_003_src_valid;                                                                        // id_router_003:src_valid -> rsp_xbar_demux_003:sink_valid
	wire          id_router_003_src_startofpacket;                                                                // id_router_003:src_startofpacket -> rsp_xbar_demux_003:sink_startofpacket
	wire  [105:0] id_router_003_src_data;                                                                         // id_router_003:src_data -> rsp_xbar_demux_003:sink_data
	wire    [3:0] id_router_003_src_channel;                                                                      // id_router_003:src_channel -> rsp_xbar_demux_003:sink_channel
	wire          id_router_003_src_ready;                                                                        // rsp_xbar_demux_003:sink_ready -> id_router_003:src_ready
	wire          addr_router_002_src_endofpacket;                                                                // addr_router_002:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire          addr_router_002_src_valid;                                                                      // addr_router_002:src_valid -> limiter:cmd_sink_valid
	wire          addr_router_002_src_startofpacket;                                                              // addr_router_002:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [105:0] addr_router_002_src_data;                                                                       // addr_router_002:src_data -> limiter:cmd_sink_data
	wire    [3:0] addr_router_002_src_channel;                                                                    // addr_router_002:src_channel -> limiter:cmd_sink_channel
	wire          addr_router_002_src_ready;                                                                      // limiter:cmd_sink_ready -> addr_router_002:src_ready
	wire          limiter_cmd_src_endofpacket;                                                                    // limiter:cmd_src_endofpacket -> cmd_xbar_demux_002:sink_endofpacket
	wire          limiter_cmd_src_startofpacket;                                                                  // limiter:cmd_src_startofpacket -> cmd_xbar_demux_002:sink_startofpacket
	wire  [105:0] limiter_cmd_src_data;                                                                           // limiter:cmd_src_data -> cmd_xbar_demux_002:sink_data
	wire    [3:0] limiter_cmd_src_channel;                                                                        // limiter:cmd_src_channel -> cmd_xbar_demux_002:sink_channel
	wire          limiter_cmd_src_ready;                                                                          // cmd_xbar_demux_002:sink_ready -> limiter:cmd_src_ready
	wire          rsp_xbar_mux_002_src_endofpacket;                                                               // rsp_xbar_mux_002:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire          rsp_xbar_mux_002_src_valid;                                                                     // rsp_xbar_mux_002:src_valid -> limiter:rsp_sink_valid
	wire          rsp_xbar_mux_002_src_startofpacket;                                                             // rsp_xbar_mux_002:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [105:0] rsp_xbar_mux_002_src_data;                                                                      // rsp_xbar_mux_002:src_data -> limiter:rsp_sink_data
	wire    [3:0] rsp_xbar_mux_002_src_channel;                                                                   // rsp_xbar_mux_002:src_channel -> limiter:rsp_sink_channel
	wire          rsp_xbar_mux_002_src_ready;                                                                     // limiter:rsp_sink_ready -> rsp_xbar_mux_002:src_ready
	wire          limiter_rsp_src_endofpacket;                                                                    // limiter:rsp_src_endofpacket -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          limiter_rsp_src_valid;                                                                          // limiter:rsp_src_valid -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          limiter_rsp_src_startofpacket;                                                                  // limiter:rsp_src_startofpacket -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [105:0] limiter_rsp_src_data;                                                                           // limiter:rsp_src_data -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:rp_data
	wire    [3:0] limiter_rsp_src_channel;                                                                        // limiter:rsp_src_channel -> peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          limiter_rsp_src_ready;                                                                          // peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent:rp_ready -> limiter:rsp_src_ready
	wire          burst_adapter_source0_endofpacket;                                                              // burst_adapter:source0_endofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_source0_valid;                                                                    // burst_adapter:source0_valid -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_source0_startofpacket;                                                            // burst_adapter:source0_startofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire   [87:0] burst_adapter_source0_data;                                                                     // burst_adapter:source0_data -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_source0_ready;                                                                    // sdram_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire    [3:0] burst_adapter_source0_channel;                                                                  // burst_adapter:source0_channel -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_demux_src0_endofpacket;                                                                // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                      // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                              // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [105:0] cmd_xbar_demux_src0_data;                                                                       // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire    [3:0] cmd_xbar_demux_src0_channel;                                                                    // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src0_ready;                                                                      // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire          cmd_xbar_demux_src1_endofpacket;                                                                // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire          cmd_xbar_demux_src1_valid;                                                                      // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire          cmd_xbar_demux_src1_startofpacket;                                                              // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [105:0] cmd_xbar_demux_src1_data;                                                                       // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire    [3:0] cmd_xbar_demux_src1_channel;                                                                    // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire          cmd_xbar_demux_src1_ready;                                                                      // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire          cmd_xbar_demux_src2_endofpacket;                                                                // cmd_xbar_demux:src2_endofpacket -> cmd_xbar_mux_002:sink0_endofpacket
	wire          cmd_xbar_demux_src2_valid;                                                                      // cmd_xbar_demux:src2_valid -> cmd_xbar_mux_002:sink0_valid
	wire          cmd_xbar_demux_src2_startofpacket;                                                              // cmd_xbar_demux:src2_startofpacket -> cmd_xbar_mux_002:sink0_startofpacket
	wire  [105:0] cmd_xbar_demux_src2_data;                                                                       // cmd_xbar_demux:src2_data -> cmd_xbar_mux_002:sink0_data
	wire    [3:0] cmd_xbar_demux_src2_channel;                                                                    // cmd_xbar_demux:src2_channel -> cmd_xbar_mux_002:sink0_channel
	wire          cmd_xbar_demux_src2_ready;                                                                      // cmd_xbar_mux_002:sink0_ready -> cmd_xbar_demux:src2_ready
	wire          cmd_xbar_demux_001_src0_endofpacket;                                                            // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire          cmd_xbar_demux_001_src0_valid;                                                                  // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire          cmd_xbar_demux_001_src0_startofpacket;                                                          // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [105:0] cmd_xbar_demux_001_src0_data;                                                                   // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire    [3:0] cmd_xbar_demux_001_src0_channel;                                                                // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire          cmd_xbar_demux_001_src0_ready;                                                                  // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire          cmd_xbar_demux_001_src1_endofpacket;                                                            // cmd_xbar_demux_001:src1_endofpacket -> cmd_xbar_mux_001:sink1_endofpacket
	wire          cmd_xbar_demux_001_src1_valid;                                                                  // cmd_xbar_demux_001:src1_valid -> cmd_xbar_mux_001:sink1_valid
	wire          cmd_xbar_demux_001_src1_startofpacket;                                                          // cmd_xbar_demux_001:src1_startofpacket -> cmd_xbar_mux_001:sink1_startofpacket
	wire  [105:0] cmd_xbar_demux_001_src1_data;                                                                   // cmd_xbar_demux_001:src1_data -> cmd_xbar_mux_001:sink1_data
	wire    [3:0] cmd_xbar_demux_001_src1_channel;                                                                // cmd_xbar_demux_001:src1_channel -> cmd_xbar_mux_001:sink1_channel
	wire          cmd_xbar_demux_001_src1_ready;                                                                  // cmd_xbar_mux_001:sink1_ready -> cmd_xbar_demux_001:src1_ready
	wire          cmd_xbar_demux_001_src2_endofpacket;                                                            // cmd_xbar_demux_001:src2_endofpacket -> cmd_xbar_mux_002:sink1_endofpacket
	wire          cmd_xbar_demux_001_src2_valid;                                                                  // cmd_xbar_demux_001:src2_valid -> cmd_xbar_mux_002:sink1_valid
	wire          cmd_xbar_demux_001_src2_startofpacket;                                                          // cmd_xbar_demux_001:src2_startofpacket -> cmd_xbar_mux_002:sink1_startofpacket
	wire  [105:0] cmd_xbar_demux_001_src2_data;                                                                   // cmd_xbar_demux_001:src2_data -> cmd_xbar_mux_002:sink1_data
	wire    [3:0] cmd_xbar_demux_001_src2_channel;                                                                // cmd_xbar_demux_001:src2_channel -> cmd_xbar_mux_002:sink1_channel
	wire          cmd_xbar_demux_001_src2_ready;                                                                  // cmd_xbar_mux_002:sink1_ready -> cmd_xbar_demux_001:src2_ready
	wire          cmd_xbar_demux_002_src0_endofpacket;                                                            // cmd_xbar_demux_002:src0_endofpacket -> cmd_xbar_mux_001:sink2_endofpacket
	wire          cmd_xbar_demux_002_src0_valid;                                                                  // cmd_xbar_demux_002:src0_valid -> cmd_xbar_mux_001:sink2_valid
	wire          cmd_xbar_demux_002_src0_startofpacket;                                                          // cmd_xbar_demux_002:src0_startofpacket -> cmd_xbar_mux_001:sink2_startofpacket
	wire  [105:0] cmd_xbar_demux_002_src0_data;                                                                   // cmd_xbar_demux_002:src0_data -> cmd_xbar_mux_001:sink2_data
	wire    [3:0] cmd_xbar_demux_002_src0_channel;                                                                // cmd_xbar_demux_002:src0_channel -> cmd_xbar_mux_001:sink2_channel
	wire          cmd_xbar_demux_002_src0_ready;                                                                  // cmd_xbar_mux_001:sink2_ready -> cmd_xbar_demux_002:src0_ready
	wire          cmd_xbar_demux_002_src1_endofpacket;                                                            // cmd_xbar_demux_002:src1_endofpacket -> cmd_xbar_mux_002:sink2_endofpacket
	wire          cmd_xbar_demux_002_src1_valid;                                                                  // cmd_xbar_demux_002:src1_valid -> cmd_xbar_mux_002:sink2_valid
	wire          cmd_xbar_demux_002_src1_startofpacket;                                                          // cmd_xbar_demux_002:src1_startofpacket -> cmd_xbar_mux_002:sink2_startofpacket
	wire  [105:0] cmd_xbar_demux_002_src1_data;                                                                   // cmd_xbar_demux_002:src1_data -> cmd_xbar_mux_002:sink2_data
	wire    [3:0] cmd_xbar_demux_002_src1_channel;                                                                // cmd_xbar_demux_002:src1_channel -> cmd_xbar_mux_002:sink2_channel
	wire          cmd_xbar_demux_002_src1_ready;                                                                  // cmd_xbar_mux_002:sink2_ready -> cmd_xbar_demux_002:src1_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                                // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                      // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                              // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [105:0] rsp_xbar_demux_src0_data;                                                                       // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire    [3:0] rsp_xbar_demux_src0_channel;                                                                    // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire          rsp_xbar_demux_src0_ready;                                                                      // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire          rsp_xbar_demux_src1_endofpacket;                                                                // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire          rsp_xbar_demux_src1_valid;                                                                      // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire          rsp_xbar_demux_src1_startofpacket;                                                              // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [105:0] rsp_xbar_demux_src1_data;                                                                       // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire    [3:0] rsp_xbar_demux_src1_channel;                                                                    // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire          rsp_xbar_demux_src1_ready;                                                                      // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire          rsp_xbar_demux_001_src0_endofpacket;                                                            // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire          rsp_xbar_demux_001_src0_valid;                                                                  // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire          rsp_xbar_demux_001_src0_startofpacket;                                                          // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [105:0] rsp_xbar_demux_001_src0_data;                                                                   // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire    [3:0] rsp_xbar_demux_001_src0_channel;                                                                // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire          rsp_xbar_demux_001_src0_ready;                                                                  // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire          rsp_xbar_demux_001_src1_endofpacket;                                                            // rsp_xbar_demux_001:src1_endofpacket -> rsp_xbar_mux_001:sink1_endofpacket
	wire          rsp_xbar_demux_001_src1_valid;                                                                  // rsp_xbar_demux_001:src1_valid -> rsp_xbar_mux_001:sink1_valid
	wire          rsp_xbar_demux_001_src1_startofpacket;                                                          // rsp_xbar_demux_001:src1_startofpacket -> rsp_xbar_mux_001:sink1_startofpacket
	wire  [105:0] rsp_xbar_demux_001_src1_data;                                                                   // rsp_xbar_demux_001:src1_data -> rsp_xbar_mux_001:sink1_data
	wire    [3:0] rsp_xbar_demux_001_src1_channel;                                                                // rsp_xbar_demux_001:src1_channel -> rsp_xbar_mux_001:sink1_channel
	wire          rsp_xbar_demux_001_src1_ready;                                                                  // rsp_xbar_mux_001:sink1_ready -> rsp_xbar_demux_001:src1_ready
	wire          rsp_xbar_demux_001_src2_endofpacket;                                                            // rsp_xbar_demux_001:src2_endofpacket -> rsp_xbar_mux_002:sink0_endofpacket
	wire          rsp_xbar_demux_001_src2_valid;                                                                  // rsp_xbar_demux_001:src2_valid -> rsp_xbar_mux_002:sink0_valid
	wire          rsp_xbar_demux_001_src2_startofpacket;                                                          // rsp_xbar_demux_001:src2_startofpacket -> rsp_xbar_mux_002:sink0_startofpacket
	wire  [105:0] rsp_xbar_demux_001_src2_data;                                                                   // rsp_xbar_demux_001:src2_data -> rsp_xbar_mux_002:sink0_data
	wire    [3:0] rsp_xbar_demux_001_src2_channel;                                                                // rsp_xbar_demux_001:src2_channel -> rsp_xbar_mux_002:sink0_channel
	wire          rsp_xbar_demux_001_src2_ready;                                                                  // rsp_xbar_mux_002:sink0_ready -> rsp_xbar_demux_001:src2_ready
	wire          rsp_xbar_demux_002_src0_endofpacket;                                                            // rsp_xbar_demux_002:src0_endofpacket -> rsp_xbar_mux:sink2_endofpacket
	wire          rsp_xbar_demux_002_src0_valid;                                                                  // rsp_xbar_demux_002:src0_valid -> rsp_xbar_mux:sink2_valid
	wire          rsp_xbar_demux_002_src0_startofpacket;                                                          // rsp_xbar_demux_002:src0_startofpacket -> rsp_xbar_mux:sink2_startofpacket
	wire  [105:0] rsp_xbar_demux_002_src0_data;                                                                   // rsp_xbar_demux_002:src0_data -> rsp_xbar_mux:sink2_data
	wire    [3:0] rsp_xbar_demux_002_src0_channel;                                                                // rsp_xbar_demux_002:src0_channel -> rsp_xbar_mux:sink2_channel
	wire          rsp_xbar_demux_002_src0_ready;                                                                  // rsp_xbar_mux:sink2_ready -> rsp_xbar_demux_002:src0_ready
	wire          rsp_xbar_demux_002_src1_endofpacket;                                                            // rsp_xbar_demux_002:src1_endofpacket -> rsp_xbar_mux_001:sink2_endofpacket
	wire          rsp_xbar_demux_002_src1_valid;                                                                  // rsp_xbar_demux_002:src1_valid -> rsp_xbar_mux_001:sink2_valid
	wire          rsp_xbar_demux_002_src1_startofpacket;                                                          // rsp_xbar_demux_002:src1_startofpacket -> rsp_xbar_mux_001:sink2_startofpacket
	wire  [105:0] rsp_xbar_demux_002_src1_data;                                                                   // rsp_xbar_demux_002:src1_data -> rsp_xbar_mux_001:sink2_data
	wire    [3:0] rsp_xbar_demux_002_src1_channel;                                                                // rsp_xbar_demux_002:src1_channel -> rsp_xbar_mux_001:sink2_channel
	wire          rsp_xbar_demux_002_src1_ready;                                                                  // rsp_xbar_mux_001:sink2_ready -> rsp_xbar_demux_002:src1_ready
	wire          rsp_xbar_demux_002_src2_endofpacket;                                                            // rsp_xbar_demux_002:src2_endofpacket -> rsp_xbar_mux_002:sink1_endofpacket
	wire          rsp_xbar_demux_002_src2_valid;                                                                  // rsp_xbar_demux_002:src2_valid -> rsp_xbar_mux_002:sink1_valid
	wire          rsp_xbar_demux_002_src2_startofpacket;                                                          // rsp_xbar_demux_002:src2_startofpacket -> rsp_xbar_mux_002:sink1_startofpacket
	wire  [105:0] rsp_xbar_demux_002_src2_data;                                                                   // rsp_xbar_demux_002:src2_data -> rsp_xbar_mux_002:sink1_data
	wire    [3:0] rsp_xbar_demux_002_src2_channel;                                                                // rsp_xbar_demux_002:src2_channel -> rsp_xbar_mux_002:sink1_channel
	wire          rsp_xbar_demux_002_src2_ready;                                                                  // rsp_xbar_mux_002:sink1_ready -> rsp_xbar_demux_002:src2_ready
	wire          id_router_002_src_endofpacket;                                                                  // id_router_002:src_endofpacket -> width_adapter:in_endofpacket
	wire          id_router_002_src_valid;                                                                        // id_router_002:src_valid -> width_adapter:in_valid
	wire          id_router_002_src_startofpacket;                                                                // id_router_002:src_startofpacket -> width_adapter:in_startofpacket
	wire   [87:0] id_router_002_src_data;                                                                         // id_router_002:src_data -> width_adapter:in_data
	wire    [3:0] id_router_002_src_channel;                                                                      // id_router_002:src_channel -> width_adapter:in_channel
	wire          id_router_002_src_ready;                                                                        // width_adapter:in_ready -> id_router_002:src_ready
	wire          width_adapter_src_endofpacket;                                                                  // width_adapter:out_endofpacket -> rsp_xbar_demux_002:sink_endofpacket
	wire          width_adapter_src_valid;                                                                        // width_adapter:out_valid -> rsp_xbar_demux_002:sink_valid
	wire          width_adapter_src_startofpacket;                                                                // width_adapter:out_startofpacket -> rsp_xbar_demux_002:sink_startofpacket
	wire  [105:0] width_adapter_src_data;                                                                         // width_adapter:out_data -> rsp_xbar_demux_002:sink_data
	wire          width_adapter_src_ready;                                                                        // rsp_xbar_demux_002:sink_ready -> width_adapter:out_ready
	wire    [3:0] width_adapter_src_channel;                                                                      // width_adapter:out_channel -> rsp_xbar_demux_002:sink_channel
	wire          cmd_xbar_mux_002_src_endofpacket;                                                               // cmd_xbar_mux_002:src_endofpacket -> width_adapter_001:in_endofpacket
	wire          cmd_xbar_mux_002_src_valid;                                                                     // cmd_xbar_mux_002:src_valid -> width_adapter_001:in_valid
	wire          cmd_xbar_mux_002_src_startofpacket;                                                             // cmd_xbar_mux_002:src_startofpacket -> width_adapter_001:in_startofpacket
	wire  [105:0] cmd_xbar_mux_002_src_data;                                                                      // cmd_xbar_mux_002:src_data -> width_adapter_001:in_data
	wire    [3:0] cmd_xbar_mux_002_src_channel;                                                                   // cmd_xbar_mux_002:src_channel -> width_adapter_001:in_channel
	wire          cmd_xbar_mux_002_src_ready;                                                                     // width_adapter_001:in_ready -> cmd_xbar_mux_002:src_ready
	wire          width_adapter_001_src_endofpacket;                                                              // width_adapter_001:out_endofpacket -> burst_adapter:sink0_endofpacket
	wire          width_adapter_001_src_valid;                                                                    // width_adapter_001:out_valid -> burst_adapter:sink0_valid
	wire          width_adapter_001_src_startofpacket;                                                            // width_adapter_001:out_startofpacket -> burst_adapter:sink0_startofpacket
	wire   [87:0] width_adapter_001_src_data;                                                                     // width_adapter_001:out_data -> burst_adapter:sink0_data
	wire          width_adapter_001_src_ready;                                                                    // burst_adapter:sink0_ready -> width_adapter_001:out_ready
	wire    [3:0] width_adapter_001_src_channel;                                                                  // width_adapter_001:out_channel -> burst_adapter:sink0_channel
	wire          cmd_xbar_demux_001_src3_endofpacket;                                                            // cmd_xbar_demux_001:src3_endofpacket -> crosser:in_endofpacket
	wire          cmd_xbar_demux_001_src3_valid;                                                                  // cmd_xbar_demux_001:src3_valid -> crosser:in_valid
	wire          cmd_xbar_demux_001_src3_startofpacket;                                                          // cmd_xbar_demux_001:src3_startofpacket -> crosser:in_startofpacket
	wire  [105:0] cmd_xbar_demux_001_src3_data;                                                                   // cmd_xbar_demux_001:src3_data -> crosser:in_data
	wire    [3:0] cmd_xbar_demux_001_src3_channel;                                                                // cmd_xbar_demux_001:src3_channel -> crosser:in_channel
	wire          cmd_xbar_demux_001_src3_ready;                                                                  // crosser:in_ready -> cmd_xbar_demux_001:src3_ready
	wire          crosser_out_endofpacket;                                                                        // crosser:out_endofpacket -> cmd_xbar_mux_003:sink0_endofpacket
	wire          crosser_out_valid;                                                                              // crosser:out_valid -> cmd_xbar_mux_003:sink0_valid
	wire          crosser_out_startofpacket;                                                                      // crosser:out_startofpacket -> cmd_xbar_mux_003:sink0_startofpacket
	wire  [105:0] crosser_out_data;                                                                               // crosser:out_data -> cmd_xbar_mux_003:sink0_data
	wire    [3:0] crosser_out_channel;                                                                            // crosser:out_channel -> cmd_xbar_mux_003:sink0_channel
	wire          crosser_out_ready;                                                                              // cmd_xbar_mux_003:sink0_ready -> crosser:out_ready
	wire          cmd_xbar_demux_002_src2_endofpacket;                                                            // cmd_xbar_demux_002:src2_endofpacket -> crosser_001:in_endofpacket
	wire          cmd_xbar_demux_002_src2_valid;                                                                  // cmd_xbar_demux_002:src2_valid -> crosser_001:in_valid
	wire          cmd_xbar_demux_002_src2_startofpacket;                                                          // cmd_xbar_demux_002:src2_startofpacket -> crosser_001:in_startofpacket
	wire  [105:0] cmd_xbar_demux_002_src2_data;                                                                   // cmd_xbar_demux_002:src2_data -> crosser_001:in_data
	wire    [3:0] cmd_xbar_demux_002_src2_channel;                                                                // cmd_xbar_demux_002:src2_channel -> crosser_001:in_channel
	wire          cmd_xbar_demux_002_src2_ready;                                                                  // crosser_001:in_ready -> cmd_xbar_demux_002:src2_ready
	wire          crosser_001_out_endofpacket;                                                                    // crosser_001:out_endofpacket -> cmd_xbar_mux_003:sink1_endofpacket
	wire          crosser_001_out_valid;                                                                          // crosser_001:out_valid -> cmd_xbar_mux_003:sink1_valid
	wire          crosser_001_out_startofpacket;                                                                  // crosser_001:out_startofpacket -> cmd_xbar_mux_003:sink1_startofpacket
	wire  [105:0] crosser_001_out_data;                                                                           // crosser_001:out_data -> cmd_xbar_mux_003:sink1_data
	wire    [3:0] crosser_001_out_channel;                                                                        // crosser_001:out_channel -> cmd_xbar_mux_003:sink1_channel
	wire          crosser_001_out_ready;                                                                          // cmd_xbar_mux_003:sink1_ready -> crosser_001:out_ready
	wire          rsp_xbar_demux_003_src0_endofpacket;                                                            // rsp_xbar_demux_003:src0_endofpacket -> crosser_002:in_endofpacket
	wire          rsp_xbar_demux_003_src0_valid;                                                                  // rsp_xbar_demux_003:src0_valid -> crosser_002:in_valid
	wire          rsp_xbar_demux_003_src0_startofpacket;                                                          // rsp_xbar_demux_003:src0_startofpacket -> crosser_002:in_startofpacket
	wire  [105:0] rsp_xbar_demux_003_src0_data;                                                                   // rsp_xbar_demux_003:src0_data -> crosser_002:in_data
	wire    [3:0] rsp_xbar_demux_003_src0_channel;                                                                // rsp_xbar_demux_003:src0_channel -> crosser_002:in_channel
	wire          rsp_xbar_demux_003_src0_ready;                                                                  // crosser_002:in_ready -> rsp_xbar_demux_003:src0_ready
	wire          crosser_002_out_endofpacket;                                                                    // crosser_002:out_endofpacket -> rsp_xbar_mux_001:sink3_endofpacket
	wire          crosser_002_out_valid;                                                                          // crosser_002:out_valid -> rsp_xbar_mux_001:sink3_valid
	wire          crosser_002_out_startofpacket;                                                                  // crosser_002:out_startofpacket -> rsp_xbar_mux_001:sink3_startofpacket
	wire  [105:0] crosser_002_out_data;                                                                           // crosser_002:out_data -> rsp_xbar_mux_001:sink3_data
	wire    [3:0] crosser_002_out_channel;                                                                        // crosser_002:out_channel -> rsp_xbar_mux_001:sink3_channel
	wire          crosser_002_out_ready;                                                                          // rsp_xbar_mux_001:sink3_ready -> crosser_002:out_ready
	wire          rsp_xbar_demux_003_src1_endofpacket;                                                            // rsp_xbar_demux_003:src1_endofpacket -> crosser_003:in_endofpacket
	wire          rsp_xbar_demux_003_src1_valid;                                                                  // rsp_xbar_demux_003:src1_valid -> crosser_003:in_valid
	wire          rsp_xbar_demux_003_src1_startofpacket;                                                          // rsp_xbar_demux_003:src1_startofpacket -> crosser_003:in_startofpacket
	wire  [105:0] rsp_xbar_demux_003_src1_data;                                                                   // rsp_xbar_demux_003:src1_data -> crosser_003:in_data
	wire    [3:0] rsp_xbar_demux_003_src1_channel;                                                                // rsp_xbar_demux_003:src1_channel -> crosser_003:in_channel
	wire          rsp_xbar_demux_003_src1_ready;                                                                  // crosser_003:in_ready -> rsp_xbar_demux_003:src1_ready
	wire          crosser_003_out_endofpacket;                                                                    // crosser_003:out_endofpacket -> rsp_xbar_mux_002:sink2_endofpacket
	wire          crosser_003_out_valid;                                                                          // crosser_003:out_valid -> rsp_xbar_mux_002:sink2_valid
	wire          crosser_003_out_startofpacket;                                                                  // crosser_003:out_startofpacket -> rsp_xbar_mux_002:sink2_startofpacket
	wire  [105:0] crosser_003_out_data;                                                                           // crosser_003:out_data -> rsp_xbar_mux_002:sink2_data
	wire    [3:0] crosser_003_out_channel;                                                                        // crosser_003:out_channel -> rsp_xbar_mux_002:sink2_channel
	wire          crosser_003_out_ready;                                                                          // rsp_xbar_mux_002:sink2_ready -> crosser_003:out_ready
	wire    [3:0] limiter_cmd_valid_data;                                                                         // limiter:cmd_src_valid -> cmd_xbar_demux_002:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_e_instruction_master_translator (
		.clk                      (clk_core_clk_clk),                                                              //                       clk.clk
		.reset                    (nios2_e_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (nios2_e_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios2_e_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios2_e_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios2_e_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios2_e_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios2_e_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios2_e_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios2_e_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios2_e_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios2_e_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios2_e_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios2_e_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios2_e_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (nios2_e_instruction_master_read),                                               //                          .read
		.av_readdata              (nios2_e_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount            (1'b1),                                                                          //               (terminated)
		.av_byteenable            (4'b1111),                                                                       //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                          //               (terminated)
		.av_begintransfer         (1'b0),                                                                          //               (terminated)
		.av_chipselect            (1'b0),                                                                          //               (terminated)
		.av_readdatavalid         (),                                                                              //               (terminated)
		.av_write                 (1'b0),                                                                          //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                          //               (terminated)
		.av_lock                  (1'b0),                                                                          //               (terminated)
		.av_debugaccess           (1'b0),                                                                          //               (terminated)
		.uav_clken                (),                                                                              //               (terminated)
		.av_clken                 (1'b1),                                                                          //               (terminated)
		.uav_response             (2'b00),                                                                         //               (terminated)
		.av_response              (),                                                                              //               (terminated)
		.uav_writeresponserequest (),                                                                              //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                          //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid    ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_e_data_master_translator (
		.clk                      (clk_core_clk_clk),                                                       //                       clk.clk
		.reset                    (nios2_e_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (nios2_e_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios2_e_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios2_e_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios2_e_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios2_e_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios2_e_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios2_e_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios2_e_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios2_e_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios2_e_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios2_e_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios2_e_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios2_e_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (nios2_e_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (nios2_e_data_master_read),                                               //                          .read
		.av_readdata              (nios2_e_data_master_readdata),                                           //                          .readdata
		.av_write                 (nios2_e_data_master_write),                                              //                          .write
		.av_writedata             (nios2_e_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (nios2_e_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount            (1'b1),                                                                   //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                   //               (terminated)
		.av_begintransfer         (1'b0),                                                                   //               (terminated)
		.av_chipselect            (1'b0),                                                                   //               (terminated)
		.av_readdatavalid         (),                                                                       //               (terminated)
		.av_lock                  (1'b0),                                                                   //               (terminated)
		.uav_clken                (),                                                                       //               (terminated)
		.av_clken                 (1'b1),                                                                   //               (terminated)
		.uav_response             (2'b00),                                                                  //               (terminated)
		.av_response              (),                                                                       //               (terminated)
		.uav_writeresponserequest (),                                                                       //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                   //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid    ()                                                                        //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) peridot_bridge_avalon_master_translator (
		.clk                      (clk_core_clk_clk),                                                                //                       clk.clk
		.reset                    (nios2_e_reset_n_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address              (peridot_bridge_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (peridot_bridge_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (peridot_bridge_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (peridot_bridge_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (peridot_bridge_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (peridot_bridge_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (peridot_bridge_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (peridot_bridge_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (peridot_bridge_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (peridot_bridge_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (peridot_bridge_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (peridot_bridge_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (peridot_bridge_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (peridot_bridge_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                  (peridot_bridge_avalon_master_read),                                               //                          .read
		.av_readdata              (peridot_bridge_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (peridot_bridge_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (peridot_bridge_avalon_master_write),                                              //                          .write
		.av_writedata             (peridot_bridge_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                            //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                            //               (terminated)
		.av_begintransfer         (1'b0),                                                                            //               (terminated)
		.av_chipselect            (1'b0),                                                                            //               (terminated)
		.av_lock                  (1'b0),                                                                            //               (terminated)
		.av_debugaccess           (1'b0),                                                                            //               (terminated)
		.uav_clken                (),                                                                                //               (terminated)
		.av_clken                 (1'b1),                                                                            //               (terminated)
		.uav_response             (2'b00),                                                                           //               (terminated)
		.av_response              (),                                                                                //               (terminated)
		.uav_writeresponserequest (),                                                                                //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                            //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid    ()                                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_e_jtag_debug_module_translator (
		.clk                      (clk_core_clk_clk),                                                                     //                      clk.clk
		.reset                    (nios2_e_reset_n_reset_bridge_in_reset_reset),                                          //                    reset.reset
		.uav_address              (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (nios2_e_jtag_debug_module_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (nios2_e_jtag_debug_module_write),                                                      //                         .write
		.av_read                  (nios2_e_jtag_debug_module_read),                                                       //                         .read
		.av_readdata              (nios2_e_jtag_debug_module_readdata),                                                   //                         .readdata
		.av_writedata             (nios2_e_jtag_debug_module_writedata),                                                  //                         .writedata
		.av_byteenable            (nios2_e_jtag_debug_module_byteenable),                                                 //                         .byteenable
		.av_waitrequest           (nios2_e_jtag_debug_module_waitrequest),                                                //                         .waitrequest
		.av_debugaccess           (nios2_e_jtag_debug_module_debugaccess),                                                //                         .debugaccess
		.av_begintransfer         (),                                                                                     //              (terminated)
		.av_beginbursttransfer    (),                                                                                     //              (terminated)
		.av_burstcount            (),                                                                                     //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                                     //              (terminated)
		.av_lock                  (),                                                                                     //              (terminated)
		.av_chipselect            (),                                                                                     //              (terminated)
		.av_clken                 (),                                                                                     //              (terminated)
		.uav_clken                (1'b0),                                                                                 //              (terminated)
		.av_outputenable          (),                                                                                     //              (terminated)
		.uav_response             (),                                                                                     //              (terminated)
		.av_response              (2'b00),                                                                                //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                 //              (terminated)
		.uav_writeresponsevalid   (),                                                                                     //              (terminated)
		.av_writeresponserequest  (),                                                                                     //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ipl_memory_s1_translator (
		.clk                      (clk_core_clk_clk),                                                         //                      clk.clk
		.reset                    (nios2_e_reset_n_reset_bridge_in_reset_reset),                              //                    reset.reset
		.uav_address              (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (ipl_memory_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (ipl_memory_s1_write),                                                      //                         .write
		.av_readdata              (ipl_memory_s1_readdata),                                                   //                         .readdata
		.av_writedata             (ipl_memory_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (ipl_memory_s1_byteenable),                                                 //                         .byteenable
		.av_chipselect            (ipl_memory_s1_chipselect),                                                 //                         .chipselect
		.av_clken                 (ipl_memory_s1_clken),                                                      //                         .clken
		.av_read                  (),                                                                         //              (terminated)
		.av_begintransfer         (),                                                                         //              (terminated)
		.av_beginbursttransfer    (),                                                                         //              (terminated)
		.av_burstcount            (),                                                                         //              (terminated)
		.av_readdatavalid         (1'b0),                                                                     //              (terminated)
		.av_waitrequest           (1'b0),                                                                     //              (terminated)
		.av_writebyteenable       (),                                                                         //              (terminated)
		.av_lock                  (),                                                                         //              (terminated)
		.uav_clken                (1'b0),                                                                     //              (terminated)
		.av_debugaccess           (),                                                                         //              (terminated)
		.av_outputenable          (),                                                                         //              (terminated)
		.uav_response             (),                                                                         //              (terminated)
		.av_response              (2'b00),                                                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                     //              (terminated)
		.uav_writeresponsevalid   (),                                                                         //              (terminated)
		.av_writeresponserequest  (),                                                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (22),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                      (clk_core_clk_clk),                                                    //                      clk.clk
		.reset                    (nios2_e_reset_n_reset_bridge_in_reset_reset),                         //                    reset.reset
		.uav_address              (sdram_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sdram_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sdram_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (sdram_s1_write),                                                      //                         .write
		.av_read                  (sdram_s1_read),                                                       //                         .read
		.av_readdata              (sdram_s1_readdata),                                                   //                         .readdata
		.av_writedata             (sdram_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (sdram_s1_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (sdram_s1_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (sdram_s1_waitrequest),                                                //                         .waitrequest
		.av_chipselect            (sdram_s1_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) peripherals_bridge_s0_translator (
		.clk                      (clk_peri_clk_clk),                                                                 //                      clk.clk
		.reset                    (peripherals_bridge_reset_reset_bridge_in_reset_reset),                             //                    reset.reset
		.uav_address              (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (peripherals_bridge_s0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (peripherals_bridge_s0_write),                                                      //                         .write
		.av_read                  (peripherals_bridge_s0_read),                                                       //                         .read
		.av_readdata              (peripherals_bridge_s0_readdata),                                                   //                         .readdata
		.av_writedata             (peripherals_bridge_s0_writedata),                                                  //                         .writedata
		.av_burstcount            (peripherals_bridge_s0_burstcount),                                                 //                         .burstcount
		.av_byteenable            (peripherals_bridge_s0_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (peripherals_bridge_s0_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (peripherals_bridge_s0_waitrequest),                                                //                         .waitrequest
		.av_debugaccess           (peripherals_bridge_s0_debugaccess),                                                //                         .debugaccess
		.av_begintransfer         (),                                                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                                 //              (terminated)
		.av_lock                  (),                                                                                 //              (terminated)
		.av_chipselect            (),                                                                                 //              (terminated)
		.av_clken                 (),                                                                                 //              (terminated)
		.uav_clken                (1'b0),                                                                             //              (terminated)
		.av_outputenable          (),                                                                                 //              (terminated)
		.uav_response             (),                                                                                 //              (terminated)
		.av_response              (2'b00),                                                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                                                 //              (terminated)
		.av_writeresponserequest  (),                                                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                              //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BEGIN_BURST           (87),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (91),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_e_instruction_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_core_clk_clk),                                                                       //       clk.clk
		.reset                   (nios2_e_reset_n_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.av_address              (nios2_e_instruction_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (nios2_e_instruction_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (nios2_e_instruction_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (nios2_e_instruction_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (nios2_e_instruction_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (nios2_e_instruction_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (nios2_e_instruction_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (nios2_e_instruction_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (nios2_e_instruction_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (nios2_e_instruction_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (nios2_e_instruction_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_src_valid),                                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_src_data),                                                                  //          .data
		.rp_channel              (rsp_xbar_mux_src_channel),                                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_src_startofpacket),                                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_src_endofpacket),                                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_src_ready),                                                                 //          .ready
		.av_response             (),                                                                                       // (terminated)
		.av_writeresponserequest (1'b0),                                                                                   // (terminated)
		.av_writeresponsevalid   ()                                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BEGIN_BURST           (87),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (91),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_e_data_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_core_clk_clk),                                                                //       clk.clk
		.reset                   (nios2_e_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address              (nios2_e_data_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (nios2_e_data_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (nios2_e_data_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (nios2_e_data_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (nios2_e_data_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (nios2_e_data_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (nios2_e_data_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (nios2_e_data_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (nios2_e_data_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (nios2_e_data_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (nios2_e_data_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_001_src_valid),                                                      //        rp.valid
		.rp_data                 (rsp_xbar_mux_001_src_data),                                                       //          .data
		.rp_channel              (rsp_xbar_mux_001_src_channel),                                                    //          .channel
		.rp_startofpacket        (rsp_xbar_mux_001_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_001_src_endofpacket),                                                //          .endofpacket
		.rp_ready                (rsp_xbar_mux_001_src_ready),                                                      //          .ready
		.av_response             (),                                                                                // (terminated)
		.av_writeresponserequest (1'b0),                                                                            // (terminated)
		.av_writeresponsevalid   ()                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BEGIN_BURST           (87),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (91),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_core_clk_clk),                                                                         //       clk.clk
		.reset                   (nios2_e_reset_n_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.av_address              (peridot_bridge_avalon_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (peridot_bridge_avalon_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (peridot_bridge_avalon_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (peridot_bridge_avalon_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (peridot_bridge_avalon_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (peridot_bridge_avalon_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (peridot_bridge_avalon_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (peridot_bridge_avalon_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (peridot_bridge_avalon_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (peridot_bridge_avalon_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (peridot_bridge_avalon_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (limiter_rsp_src_valid),                                                                    //        rp.valid
		.rp_data                 (limiter_rsp_src_data),                                                                     //          .data
		.rp_channel              (limiter_rsp_src_channel),                                                                  //          .channel
		.rp_startofpacket        (limiter_rsp_src_startofpacket),                                                            //          .startofpacket
		.rp_endofpacket          (limiter_rsp_src_endofpacket),                                                              //          .endofpacket
		.rp_ready                (limiter_rsp_src_ready),                                                                    //          .ready
		.av_response             (),                                                                                         // (terminated)
		.av_writeresponserequest (1'b0),                                                                                     // (terminated)
		.av_writeresponsevalid   ()                                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (87),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_core_clk_clk),                                                                               //             clk.clk
		.reset                   (nios2_e_reset_n_reset_bridge_in_reset_reset),                                                    //       clk_reset.reset
		.m0_address              (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_src_ready),                                                                         //              cp.ready
		.cp_valid                (cmd_xbar_mux_src_valid),                                                                         //                .valid
		.cp_data                 (cmd_xbar_mux_src_data),                                                                          //                .data
		.cp_startofpacket        (cmd_xbar_mux_src_startofpacket),                                                                 //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_src_endofpacket),                                                                   //                .endofpacket
		.cp_channel              (cmd_xbar_mux_src_channel),                                                                       //                .channel
		.rf_sink_ready           (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                          //     (terminated)
		.m0_writeresponserequest (),                                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_core_clk_clk),                                                                               //       clk.clk
		.reset             (nios2_e_reset_n_reset_bridge_in_reset_reset),                                                    // clk_reset.reset
		.in_data           (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                          // (terminated)
		.csr_read          (1'b0),                                                                                           // (terminated)
		.csr_write         (1'b0),                                                                                           // (terminated)
		.csr_readdata      (),                                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                           // (terminated)
		.almost_full_data  (),                                                                                               // (terminated)
		.almost_empty_data (),                                                                                               // (terminated)
		.in_empty          (1'b0),                                                                                           // (terminated)
		.out_empty         (),                                                                                               // (terminated)
		.in_error          (1'b0),                                                                                           // (terminated)
		.out_error         (),                                                                                               // (terminated)
		.in_channel        (1'b0),                                                                                           // (terminated)
		.out_channel       ()                                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (87),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ipl_memory_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_core_clk_clk),                                                                   //             clk.clk
		.reset                   (nios2_e_reset_n_reset_bridge_in_reset_reset),                                        //       clk_reset.reset
		.m0_address              (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (ipl_memory_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_001_src_ready),                                                         //              cp.ready
		.cp_valid                (cmd_xbar_mux_001_src_valid),                                                         //                .valid
		.cp_data                 (cmd_xbar_mux_001_src_data),                                                          //                .data
		.cp_startofpacket        (cmd_xbar_mux_001_src_startofpacket),                                                 //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_001_src_endofpacket),                                                   //                .endofpacket
		.cp_channel              (cmd_xbar_mux_001_src_channel),                                                       //                .channel
		.rf_sink_ready           (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                              //     (terminated)
		.m0_writeresponserequest (),                                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_core_clk_clk),                                                                   //       clk.clk
		.reset             (nios2_e_reset_n_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_data           (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                              // (terminated)
		.csr_read          (1'b0),                                                                               // (terminated)
		.csr_write         (1'b0),                                                                               // (terminated)
		.csr_readdata      (),                                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                               // (terminated)
		.almost_full_data  (),                                                                                   // (terminated)
		.almost_empty_data (),                                                                                   // (terminated)
		.in_empty          (1'b0),                                                                               // (terminated)
		.out_empty         (),                                                                                   // (terminated)
		.in_error          (1'b0),                                                                               // (terminated)
		.out_error         (),                                                                                   // (terminated)
		.in_channel        (1'b0),                                                                               // (terminated)
		.out_channel       ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (73),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_ORI_BURST_SIZE_H      (87),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_core_clk_clk),                                                              //             clk.clk
		.reset                   (nios2_e_reset_n_reset_bridge_in_reset_reset),                                   //       clk_reset.reset
		.m0_address              (sdram_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                   //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                   //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                    //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                             //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                 //                .channel
		.rf_sink_ready           (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_core_clk_clk),                                                              //       clk.clk
		.reset             (nios2_e_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_data           (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_core_clk_clk),                                                        //       clk.clk
		.reset             (nios2_e_reset_n_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                    // (terminated)
		.out_startofpacket (),                                                                        // (terminated)
		.out_endofpacket   (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (87),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) peripherals_bridge_s0_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_peri_clk_clk),                                                                           //             clk.clk
		.reset                   (peripherals_bridge_reset_reset_bridge_in_reset_reset),                                       //       clk_reset.reset
		.m0_address              (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_003_src_ready),                                                                 //              cp.ready
		.cp_valid                (cmd_xbar_mux_003_src_valid),                                                                 //                .valid
		.cp_data                 (cmd_xbar_mux_003_src_data),                                                                  //                .data
		.cp_startofpacket        (cmd_xbar_mux_003_src_startofpacket),                                                         //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_003_src_endofpacket),                                                           //                .endofpacket
		.cp_channel              (cmd_xbar_mux_003_src_channel),                                                               //                .channel
		.rf_sink_ready           (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                      //     (terminated)
		.m0_writeresponserequest (),                                                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_peri_clk_clk),                                                                           //       clk.clk
		.reset             (peripherals_bridge_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                      // (terminated)
		.csr_read          (1'b0),                                                                                       // (terminated)
		.csr_write         (1'b0),                                                                                       // (terminated)
		.csr_readdata      (),                                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                       // (terminated)
		.almost_full_data  (),                                                                                           // (terminated)
		.almost_empty_data (),                                                                                           // (terminated)
		.in_empty          (1'b0),                                                                                       // (terminated)
		.out_empty         (),                                                                                           // (terminated)
		.in_error          (1'b0),                                                                                       // (terminated)
		.out_error         (),                                                                                           // (terminated)
		.in_channel        (1'b0),                                                                                       // (terminated)
		.out_channel       ()                                                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (clk_peri_clk_clk),                                                                     //       clk.clk
		.reset             (peripherals_bridge_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                // (terminated)
		.csr_read          (1'b0),                                                                                 // (terminated)
		.csr_write         (1'b0),                                                                                 // (terminated)
		.csr_readdata      (),                                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                 // (terminated)
		.almost_full_data  (),                                                                                     // (terminated)
		.almost_empty_data (),                                                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                                                 // (terminated)
		.out_startofpacket (),                                                                                     // (terminated)
		.out_endofpacket   (),                                                                                     // (terminated)
		.in_empty          (1'b0),                                                                                 // (terminated)
		.out_empty         (),                                                                                     // (terminated)
		.in_error          (1'b0),                                                                                 // (terminated)
		.out_error         (),                                                                                     // (terminated)
		.in_channel        (1'b0),                                                                                 // (terminated)
		.out_channel       ()                                                                                      // (terminated)
	);

	cq_viola_mm_interconnect_0_addr_router addr_router (
		.sink_ready         (nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_e_instruction_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_core_clk_clk),                                                                       //       clk.clk
		.reset              (nios2_e_reset_n_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                                  //       src.ready
		.src_valid          (addr_router_src_valid),                                                                  //          .valid
		.src_data           (addr_router_src_data),                                                                   //          .data
		.src_channel        (addr_router_src_channel),                                                                //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                             //          .endofpacket
	);

	cq_viola_mm_interconnect_0_addr_router_001 addr_router_001 (
		.sink_ready         (nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_e_data_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_core_clk_clk),                                                                //       clk.clk
		.reset              (nios2_e_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                                       //       src.ready
		.src_valid          (addr_router_001_src_valid),                                                       //          .valid
		.src_data           (addr_router_001_src_data),                                                        //          .data
		.src_channel        (addr_router_001_src_channel),                                                     //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                               //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                                  //          .endofpacket
	);

	cq_viola_mm_interconnect_0_addr_router_002 addr_router_002 (
		.sink_ready         (peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (peridot_bridge_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_core_clk_clk),                                                                         //       clk.clk
		.reset              (nios2_e_reset_n_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.src_ready          (addr_router_002_src_ready),                                                                //       src.ready
		.src_valid          (addr_router_002_src_valid),                                                                //          .valid
		.src_data           (addr_router_002_src_data),                                                                 //          .data
		.src_channel        (addr_router_002_src_channel),                                                              //          .channel
		.src_startofpacket  (addr_router_002_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket    (addr_router_002_src_endofpacket)                                                           //          .endofpacket
	);

	cq_viola_mm_interconnect_0_id_router id_router (
		.sink_ready         (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_e_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_core_clk_clk),                                                                     //       clk.clk
		.reset              (nios2_e_reset_n_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                                  //       src.ready
		.src_valid          (id_router_src_valid),                                                                  //          .valid
		.src_data           (id_router_src_data),                                                                   //          .data
		.src_channel        (id_router_src_channel),                                                                //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                                             //          .endofpacket
	);

	cq_viola_mm_interconnect_0_id_router_001 id_router_001 (
		.sink_ready         (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ipl_memory_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_core_clk_clk),                                                         //       clk.clk
		.reset              (nios2_e_reset_n_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                                  //       src.ready
		.src_valid          (id_router_001_src_valid),                                                  //          .valid
		.src_data           (id_router_001_src_data),                                                   //          .data
		.src_channel        (id_router_001_src_channel),                                                //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                             //          .endofpacket
	);

	cq_viola_mm_interconnect_0_id_router_002 id_router_002 (
		.sink_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_core_clk_clk),                                                    //       clk.clk
		.reset              (nios2_e_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready          (id_router_002_src_ready),                                             //       src.ready
		.src_valid          (id_router_002_src_valid),                                             //          .valid
		.src_data           (id_router_002_src_data),                                              //          .data
		.src_channel        (id_router_002_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_002_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_002_src_endofpacket)                                        //          .endofpacket
	);

	cq_viola_mm_interconnect_0_id_router_003 id_router_003 (
		.sink_ready         (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (peripherals_bridge_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_peri_clk_clk),                                                                 //       clk.clk
		.reset              (peripherals_bridge_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (id_router_003_src_ready),                                                          //       src.ready
		.src_valid          (id_router_003_src_valid),                                                          //          .valid
		.src_data           (id_router_003_src_data),                                                           //          .data
		.src_channel        (id_router_003_src_channel),                                                        //          .channel
		.src_startofpacket  (id_router_003_src_startofpacket),                                                  //          .startofpacket
		.src_endofpacket    (id_router_003_src_endofpacket)                                                     //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (89),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter (
		.clk                    (clk_core_clk_clk),                            //       clk.clk
		.reset                  (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_002_src_ready),                   //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_002_src_valid),                   //          .valid
		.cmd_sink_data          (addr_router_002_src_data),                    //          .data
		.cmd_sink_channel       (addr_router_002_src_channel),                 //          .channel
		.cmd_sink_startofpacket (addr_router_002_src_startofpacket),           //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_002_src_endofpacket),             //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                       //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                        //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                     //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),               //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),                 //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_002_src_ready),                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_002_src_valid),                  //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_002_src_channel),                //          .channel
		.rsp_sink_data          (rsp_xbar_mux_002_src_data),                   //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_002_src_startofpacket),          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_002_src_endofpacket),            //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                       //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                       //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                        //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                     //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),               //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),                 //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)                       // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3)
	) burst_adapter (
		.clk                   (clk_core_clk_clk),                            //       cr0.clk
		.reset                 (nios2_e_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (width_adapter_001_src_valid),                 //     sink0.valid
		.sink0_data            (width_adapter_001_src_data),                  //          .data
		.sink0_channel         (width_adapter_001_src_channel),               //          .channel
		.sink0_startofpacket   (width_adapter_001_src_startofpacket),         //          .startofpacket
		.sink0_endofpacket     (width_adapter_001_src_endofpacket),           //          .endofpacket
		.sink0_ready           (width_adapter_001_src_ready),                 //          .ready
		.source0_valid         (burst_adapter_source0_valid),                 //   source0.valid
		.source0_data          (burst_adapter_source0_data),                  //          .data
		.source0_channel       (burst_adapter_source0_channel),               //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),         //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),           //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)                  //          .ready
	);

	cq_viola_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux (
		.clk                (clk_core_clk_clk),                            //       clk.clk
		.reset              (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_src_ready),                       //      sink.ready
		.sink_channel       (addr_router_src_channel),                     //          .channel
		.sink_data          (addr_router_src_data),                        //          .data
		.sink_startofpacket (addr_router_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (addr_router_src_endofpacket),                 //          .endofpacket
		.sink_valid         (addr_router_src_valid),                       //          .valid
		.src0_ready         (cmd_xbar_demux_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                   //          .valid
		.src0_data          (cmd_xbar_demux_src0_data),                    //          .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),             //          .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),                   //      src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),                   //          .valid
		.src1_data          (cmd_xbar_demux_src1_data),                    //          .data
		.src1_channel       (cmd_xbar_demux_src1_channel),                 //          .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket),             //          .endofpacket
		.src2_ready         (cmd_xbar_demux_src2_ready),                   //      src2.ready
		.src2_valid         (cmd_xbar_demux_src2_valid),                   //          .valid
		.src2_data          (cmd_xbar_demux_src2_data),                    //          .data
		.src2_channel       (cmd_xbar_demux_src2_channel),                 //          .channel
		.src2_startofpacket (cmd_xbar_demux_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_src2_endofpacket)              //          .endofpacket
	);

	cq_viola_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_001 (
		.clk                (clk_core_clk_clk),                            //       clk.clk
		.reset              (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_001_src_ready),                   //      sink.ready
		.sink_channel       (addr_router_001_src_channel),                 //          .channel
		.sink_data          (addr_router_001_src_data),                    //          .data
		.sink_startofpacket (addr_router_001_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (addr_router_001_src_endofpacket),             //          .endofpacket
		.sink_valid         (addr_router_001_src_valid),                   //          .valid
		.src0_ready         (cmd_xbar_demux_001_src0_ready),               //      src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),               //          .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),                //          .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),             //          .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),         //          .endofpacket
		.src1_ready         (cmd_xbar_demux_001_src1_ready),               //      src1.ready
		.src1_valid         (cmd_xbar_demux_001_src1_valid),               //          .valid
		.src1_data          (cmd_xbar_demux_001_src1_data),                //          .data
		.src1_channel       (cmd_xbar_demux_001_src1_channel),             //          .channel
		.src1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket),         //          .endofpacket
		.src2_ready         (cmd_xbar_demux_001_src2_ready),               //      src2.ready
		.src2_valid         (cmd_xbar_demux_001_src2_valid),               //          .valid
		.src2_data          (cmd_xbar_demux_001_src2_data),                //          .data
		.src2_channel       (cmd_xbar_demux_001_src2_channel),             //          .channel
		.src2_startofpacket (cmd_xbar_demux_001_src2_startofpacket),       //          .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_001_src2_endofpacket),         //          .endofpacket
		.src3_ready         (cmd_xbar_demux_001_src3_ready),               //      src3.ready
		.src3_valid         (cmd_xbar_demux_001_src3_valid),               //          .valid
		.src3_data          (cmd_xbar_demux_001_src3_data),                //          .data
		.src3_channel       (cmd_xbar_demux_001_src3_channel),             //          .channel
		.src3_startofpacket (cmd_xbar_demux_001_src3_startofpacket),       //          .startofpacket
		.src3_endofpacket   (cmd_xbar_demux_001_src3_endofpacket)          //          .endofpacket
	);

	cq_viola_mm_interconnect_0_cmd_xbar_demux_002 cmd_xbar_demux_002 (
		.clk                (clk_core_clk_clk),                            //        clk.clk
		.reset              (nios2_e_reset_n_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_cmd_src_ready),                       //       sink.ready
		.sink_channel       (limiter_cmd_src_channel),                     //           .channel
		.sink_data          (limiter_cmd_src_data),                        //           .data
		.sink_startofpacket (limiter_cmd_src_startofpacket),               //           .startofpacket
		.sink_endofpacket   (limiter_cmd_src_endofpacket),                 //           .endofpacket
		.sink_valid         (limiter_cmd_valid_data),                      // sink_valid.data
		.src0_ready         (cmd_xbar_demux_002_src0_ready),               //       src0.ready
		.src0_valid         (cmd_xbar_demux_002_src0_valid),               //           .valid
		.src0_data          (cmd_xbar_demux_002_src0_data),                //           .data
		.src0_channel       (cmd_xbar_demux_002_src0_channel),             //           .channel
		.src0_startofpacket (cmd_xbar_demux_002_src0_startofpacket),       //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_002_src0_endofpacket),         //           .endofpacket
		.src1_ready         (cmd_xbar_demux_002_src1_ready),               //       src1.ready
		.src1_valid         (cmd_xbar_demux_002_src1_valid),               //           .valid
		.src1_data          (cmd_xbar_demux_002_src1_data),                //           .data
		.src1_channel       (cmd_xbar_demux_002_src1_channel),             //           .channel
		.src1_startofpacket (cmd_xbar_demux_002_src1_startofpacket),       //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_002_src1_endofpacket),         //           .endofpacket
		.src2_ready         (cmd_xbar_demux_002_src2_ready),               //       src2.ready
		.src2_valid         (cmd_xbar_demux_002_src2_valid),               //           .valid
		.src2_data          (cmd_xbar_demux_002_src2_data),                //           .data
		.src2_channel       (cmd_xbar_demux_002_src2_channel),             //           .channel
		.src2_startofpacket (cmd_xbar_demux_002_src2_startofpacket),       //           .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_002_src2_endofpacket)          //           .endofpacket
	);

	cq_viola_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (clk_core_clk_clk),                            //       clk.clk
		.reset               (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                      //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                      //          .valid
		.src_data            (cmd_xbar_mux_src_data),                       //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                    //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                   //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                   //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),                 //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                    //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),               //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),               //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),             //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),                //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)          //          .endofpacket
	);

	cq_viola_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_001 (
		.clk                 (clk_core_clk_clk),                            //       clk.clk
		.reset               (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),                   //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),                   //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),                 //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),                    //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src1_ready),               //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src1_valid),               //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src1_channel),             //          .channel
		.sink1_data          (cmd_xbar_demux_001_src1_data),                //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket),         //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src0_ready),               //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src0_valid),               //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src0_channel),             //          .channel
		.sink2_data          (cmd_xbar_demux_002_src0_data),                //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src0_startofpacket),       //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src0_endofpacket)          //          .endofpacket
	);

	cq_viola_mm_interconnect_0_cmd_xbar_mux_001 cmd_xbar_mux_002 (
		.clk                 (clk_core_clk_clk),                            //       clk.clk
		.reset               (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_002_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_002_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_002_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_002_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_002_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_002_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src2_ready),                   //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src2_valid),                   //          .valid
		.sink0_channel       (cmd_xbar_demux_src2_channel),                 //          .channel
		.sink0_data          (cmd_xbar_demux_src2_data),                    //          .data
		.sink0_startofpacket (cmd_xbar_demux_src2_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src2_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src2_ready),               //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src2_valid),               //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src2_channel),             //          .channel
		.sink1_data          (cmd_xbar_demux_001_src2_data),                //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src2_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src2_endofpacket),         //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src1_ready),               //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src1_valid),               //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src1_channel),             //          .channel
		.sink2_data          (cmd_xbar_demux_002_src1_data),                //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src1_startofpacket),       //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src1_endofpacket)          //          .endofpacket
	);

	cq_viola_mm_interconnect_0_cmd_xbar_mux_003 cmd_xbar_mux_003 (
		.clk                 (clk_peri_clk_clk),                                     //       clk.clk
		.reset               (peripherals_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_003_src_ready),                           //       src.ready
		.src_valid           (cmd_xbar_mux_003_src_valid),                           //          .valid
		.src_data            (cmd_xbar_mux_003_src_data),                            //          .data
		.src_channel         (cmd_xbar_mux_003_src_channel),                         //          .channel
		.src_startofpacket   (cmd_xbar_mux_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_003_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                    //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                    //          .valid
		.sink0_channel       (crosser_out_channel),                                  //          .channel
		.sink0_data          (crosser_out_data),                                     //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                              //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                //          .valid
		.sink1_channel       (crosser_001_out_channel),                              //          .channel
		.sink1_data          (crosser_001_out_data),                                 //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket)                           //          .endofpacket
	);

	cq_viola_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux (
		.clk                (clk_core_clk_clk),                            //       clk.clk
		.reset              (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                         //      sink.ready
		.sink_channel       (id_router_src_channel),                       //          .channel
		.sink_data          (id_router_src_data),                          //          .data
		.sink_startofpacket (id_router_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),                   //          .endofpacket
		.sink_valid         (id_router_src_valid),                         //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                   //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                    //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),                   //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                    //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket)              //          .endofpacket
	);

	cq_viola_mm_interconnect_0_cmd_xbar_demux rsp_xbar_demux_001 (
		.clk                (clk_core_clk_clk),                            //       clk.clk
		.reset              (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                     //      sink.ready
		.sink_channel       (id_router_001_src_channel),                   //          .channel
		.sink_data          (id_router_001_src_data),                      //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_001_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_001_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_001_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_001_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket),         //          .endofpacket
		.src2_ready         (rsp_xbar_demux_001_src2_ready),               //      src2.ready
		.src2_valid         (rsp_xbar_demux_001_src2_valid),               //          .valid
		.src2_data          (rsp_xbar_demux_001_src2_data),                //          .data
		.src2_channel       (rsp_xbar_demux_001_src2_channel),             //          .channel
		.src2_startofpacket (rsp_xbar_demux_001_src2_startofpacket),       //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_001_src2_endofpacket)          //          .endofpacket
	);

	cq_viola_mm_interconnect_0_cmd_xbar_demux rsp_xbar_demux_002 (
		.clk                (clk_core_clk_clk),                            //       clk.clk
		.reset              (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_src_ready),                     //      sink.ready
		.sink_channel       (width_adapter_src_channel),                   //          .channel
		.sink_data          (width_adapter_src_data),                      //          .data
		.sink_startofpacket (width_adapter_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (width_adapter_src_endofpacket),               //          .endofpacket
		.sink_valid         (width_adapter_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_002_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_002_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_002_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_002_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_002_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_002_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_002_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_002_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_002_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_002_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_002_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_002_src1_endofpacket),         //          .endofpacket
		.src2_ready         (rsp_xbar_demux_002_src2_ready),               //      src2.ready
		.src2_valid         (rsp_xbar_demux_002_src2_valid),               //          .valid
		.src2_data          (rsp_xbar_demux_002_src2_data),                //          .data
		.src2_channel       (rsp_xbar_demux_002_src2_channel),             //          .channel
		.src2_startofpacket (rsp_xbar_demux_002_src2_startofpacket),       //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_002_src2_endofpacket)          //          .endofpacket
	);

	cq_viola_mm_interconnect_0_rsp_xbar_demux_003 rsp_xbar_demux_003 (
		.clk                (clk_peri_clk_clk),                                     //       clk.clk
		.reset              (peripherals_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_003_src_ready),                              //      sink.ready
		.sink_channel       (id_router_003_src_channel),                            //          .channel
		.sink_data          (id_router_003_src_data),                               //          .data
		.sink_startofpacket (id_router_003_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (id_router_003_src_endofpacket),                        //          .endofpacket
		.sink_valid         (id_router_003_src_valid),                              //          .valid
		.src0_ready         (rsp_xbar_demux_003_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_xbar_demux_003_src0_valid),                        //          .valid
		.src0_data          (rsp_xbar_demux_003_src0_data),                         //          .data
		.src0_channel       (rsp_xbar_demux_003_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_xbar_demux_003_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_003_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_xbar_demux_003_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_xbar_demux_003_src1_valid),                        //          .valid
		.src1_data          (rsp_xbar_demux_003_src1_data),                         //          .data
		.src1_channel       (rsp_xbar_demux_003_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_xbar_demux_003_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_003_src1_endofpacket)                   //          .endofpacket
	);

	cq_viola_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (clk_core_clk_clk),                            //       clk.clk
		.reset               (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                      //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                      //          .valid
		.src_data            (rsp_xbar_mux_src_data),                       //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                    //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                   //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                   //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),                 //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                    //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket),             //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src0_ready),               //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src0_valid),               //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src0_channel),             //          .channel
		.sink1_data          (rsp_xbar_demux_001_src0_data),                //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src0_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),         //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src0_ready),               //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src0_valid),               //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src0_channel),             //          .channel
		.sink2_data          (rsp_xbar_demux_002_src0_data),                //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src0_startofpacket),       //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src0_endofpacket)          //          .endofpacket
	);

	cq_viola_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_001 (
		.clk                 (clk_core_clk_clk),                            //       clk.clk
		.reset               (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_001_src_ready),                  //       src.ready
		.src_valid           (rsp_xbar_mux_001_src_valid),                  //          .valid
		.src_data            (rsp_xbar_mux_001_src_data),                   //          .data
		.src_channel         (rsp_xbar_mux_001_src_channel),                //          .channel
		.src_startofpacket   (rsp_xbar_mux_001_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_001_src_endofpacket),            //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src1_ready),                   //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src1_valid),                   //          .valid
		.sink0_channel       (rsp_xbar_demux_src1_channel),                 //          .channel
		.sink0_data          (rsp_xbar_demux_src1_data),                    //          .data
		.sink0_startofpacket (rsp_xbar_demux_src1_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src1_endofpacket),             //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src1_ready),               //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src1_valid),               //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src1_channel),             //          .channel
		.sink1_data          (rsp_xbar_demux_001_src1_data),                //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket),         //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src1_ready),               //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src1_valid),               //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src1_channel),             //          .channel
		.sink2_data          (rsp_xbar_demux_002_src1_data),                //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src1_startofpacket),       //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src1_endofpacket),         //          .endofpacket
		.sink3_ready         (crosser_002_out_ready),                       //     sink3.ready
		.sink3_valid         (crosser_002_out_valid),                       //          .valid
		.sink3_channel       (crosser_002_out_channel),                     //          .channel
		.sink3_data          (crosser_002_out_data),                        //          .data
		.sink3_startofpacket (crosser_002_out_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (crosser_002_out_endofpacket)                  //          .endofpacket
	);

	cq_viola_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux_002 (
		.clk                 (clk_core_clk_clk),                            //       clk.clk
		.reset               (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_002_src_ready),                  //       src.ready
		.src_valid           (rsp_xbar_mux_002_src_valid),                  //          .valid
		.src_data            (rsp_xbar_mux_002_src_data),                   //          .data
		.src_channel         (rsp_xbar_mux_002_src_channel),                //          .channel
		.src_startofpacket   (rsp_xbar_mux_002_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_002_src_endofpacket),            //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_001_src2_ready),               //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_001_src2_valid),               //          .valid
		.sink0_channel       (rsp_xbar_demux_001_src2_channel),             //          .channel
		.sink0_data          (rsp_xbar_demux_001_src2_data),                //          .data
		.sink0_startofpacket (rsp_xbar_demux_001_src2_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_001_src2_endofpacket),         //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_002_src2_ready),               //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_002_src2_valid),               //          .valid
		.sink1_channel       (rsp_xbar_demux_002_src2_channel),             //          .channel
		.sink1_data          (rsp_xbar_demux_002_src2_data),                //          .data
		.sink1_startofpacket (rsp_xbar_demux_002_src2_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_002_src2_endofpacket),         //          .endofpacket
		.sink2_ready         (crosser_003_out_ready),                       //     sink2.ready
		.sink2_valid         (crosser_003_out_valid),                       //          .valid
		.sink2_channel       (crosser_003_out_channel),                     //          .channel
		.sink2_data          (crosser_003_out_data),                        //          .data
		.sink2_startofpacket (crosser_003_out_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (crosser_003_out_endofpacket)                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (84),
		.IN_PKT_RESPONSE_STATUS_L      (83),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (85),
		.IN_PKT_ORI_BURST_SIZE_H       (87),
		.IN_ST_DATA_W                  (88),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (102),
		.OUT_PKT_RESPONSE_STATUS_L     (101),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (103),
		.OUT_PKT_ORI_BURST_SIZE_H      (105),
		.OUT_ST_DATA_W                 (106),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter (
		.clk                  (clk_core_clk_clk),                            //       clk.clk
		.reset                (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_002_src_valid),                     //      sink.valid
		.in_channel           (id_router_002_src_channel),                   //          .channel
		.in_startofpacket     (id_router_002_src_startofpacket),             //          .startofpacket
		.in_endofpacket       (id_router_002_src_endofpacket),               //          .endofpacket
		.in_ready             (id_router_002_src_ready),                     //          .ready
		.in_data              (id_router_002_src_data),                      //          .data
		.out_endofpacket      (width_adapter_src_endofpacket),               //       src.endofpacket
		.out_data             (width_adapter_src_data),                      //          .data
		.out_channel          (width_adapter_src_channel),                   //          .channel
		.out_valid            (width_adapter_src_valid),                     //          .valid
		.out_ready            (width_adapter_src_ready),                     //          .ready
		.out_startofpacket    (width_adapter_src_startofpacket),             //          .startofpacket
		.in_command_size_data (3'b000)                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (102),
		.IN_PKT_RESPONSE_STATUS_L      (101),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (103),
		.IN_PKT_ORI_BURST_SIZE_H       (105),
		.IN_ST_DATA_W                  (106),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (84),
		.OUT_PKT_RESPONSE_STATUS_L     (83),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (85),
		.OUT_PKT_ORI_BURST_SIZE_H      (87),
		.OUT_ST_DATA_W                 (88),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_001 (
		.clk                  (clk_core_clk_clk),                            //       clk.clk
		.reset                (nios2_e_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_002_src_valid),                  //      sink.valid
		.in_channel           (cmd_xbar_mux_002_src_channel),                //          .channel
		.in_startofpacket     (cmd_xbar_mux_002_src_startofpacket),          //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_002_src_endofpacket),            //          .endofpacket
		.in_ready             (cmd_xbar_mux_002_src_ready),                  //          .ready
		.in_data              (cmd_xbar_mux_002_src_data),                   //          .data
		.out_endofpacket      (width_adapter_001_src_endofpacket),           //       src.endofpacket
		.out_data             (width_adapter_001_src_data),                  //          .data
		.out_channel          (width_adapter_001_src_channel),               //          .channel
		.out_valid            (width_adapter_001_src_valid),                 //          .valid
		.out_ready            (width_adapter_001_src_ready),                 //          .ready
		.out_startofpacket    (width_adapter_001_src_startofpacket),         //          .startofpacket
		.in_command_size_data (3'b000)                                       // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_core_clk_clk),                                     //        in_clk.clk
		.in_reset          (nios2_e_reset_n_reset_bridge_in_reset_reset),          //  in_clk_reset.reset
		.out_clk           (clk_peri_clk_clk),                                     //       out_clk.clk
		.out_reset         (peripherals_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_xbar_demux_001_src3_ready),                        //            in.ready
		.in_valid          (cmd_xbar_demux_001_src3_valid),                        //              .valid
		.in_startofpacket  (cmd_xbar_demux_001_src3_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_xbar_demux_001_src3_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_xbar_demux_001_src3_channel),                      //              .channel
		.in_data           (cmd_xbar_demux_001_src3_data),                         //              .data
		.out_ready         (crosser_out_ready),                                    //           out.ready
		.out_valid         (crosser_out_valid),                                    //              .valid
		.out_startofpacket (crosser_out_startofpacket),                            //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                              //              .endofpacket
		.out_channel       (crosser_out_channel),                                  //              .channel
		.out_data          (crosser_out_data),                                     //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_core_clk_clk),                                     //        in_clk.clk
		.in_reset          (nios2_e_reset_n_reset_bridge_in_reset_reset),          //  in_clk_reset.reset
		.out_clk           (clk_peri_clk_clk),                                     //       out_clk.clk
		.out_reset         (peripherals_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_xbar_demux_002_src2_ready),                        //            in.ready
		.in_valid          (cmd_xbar_demux_002_src2_valid),                        //              .valid
		.in_startofpacket  (cmd_xbar_demux_002_src2_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_xbar_demux_002_src2_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_xbar_demux_002_src2_channel),                      //              .channel
		.in_data           (cmd_xbar_demux_002_src2_data),                         //              .data
		.out_ready         (crosser_001_out_ready),                                //           out.ready
		.out_valid         (crosser_001_out_valid),                                //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_001_out_channel),                              //              .channel
		.out_data          (crosser_001_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_peri_clk_clk),                                     //        in_clk.clk
		.in_reset          (peripherals_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_core_clk_clk),                                     //       out_clk.clk
		.out_reset         (nios2_e_reset_n_reset_bridge_in_reset_reset),          // out_clk_reset.reset
		.in_ready          (rsp_xbar_demux_003_src0_ready),                        //            in.ready
		.in_valid          (rsp_xbar_demux_003_src0_valid),                        //              .valid
		.in_startofpacket  (rsp_xbar_demux_003_src0_startofpacket),                //              .startofpacket
		.in_endofpacket    (rsp_xbar_demux_003_src0_endofpacket),                  //              .endofpacket
		.in_channel        (rsp_xbar_demux_003_src0_channel),                      //              .channel
		.in_data           (rsp_xbar_demux_003_src0_data),                         //              .data
		.out_ready         (crosser_002_out_ready),                                //           out.ready
		.out_valid         (crosser_002_out_valid),                                //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_002_out_channel),                              //              .channel
		.out_data          (crosser_002_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_peri_clk_clk),                                     //        in_clk.clk
		.in_reset          (peripherals_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_core_clk_clk),                                     //       out_clk.clk
		.out_reset         (nios2_e_reset_n_reset_bridge_in_reset_reset),          // out_clk_reset.reset
		.in_ready          (rsp_xbar_demux_003_src1_ready),                        //            in.ready
		.in_valid          (rsp_xbar_demux_003_src1_valid),                        //              .valid
		.in_startofpacket  (rsp_xbar_demux_003_src1_startofpacket),                //              .startofpacket
		.in_endofpacket    (rsp_xbar_demux_003_src1_endofpacket),                  //              .endofpacket
		.in_channel        (rsp_xbar_demux_003_src1_channel),                      //              .channel
		.in_data           (rsp_xbar_demux_003_src1_data),                         //              .data
		.out_ready         (crosser_003_out_ready),                                //           out.ready
		.out_valid         (crosser_003_out_valid),                                //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_003_out_channel),                              //              .channel
		.out_data          (crosser_003_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

endmodule
